#!/usr/bin/env python
# -*- coding: utf-8 -*-
# archivo : legajosocial.py
#
##############################################################################
#
#
# Sancabase - Administrador general para centros de Formación Profesional
# Copyright (c) 2007 Javier Castrillo // riverplatense at gmail dot com
#Este programa es software libre; usted puede redistruirlo y/o modificarlo bajo
#los términos de la Licencia Pública General GNU, tal y como está publicada
#por la Free Software Foundation; ya sea la versión 2 de la Licencia, o (a su
#elección) cualquier versión posterior.
#
#Este programa se distribuye con la intención de ser útil, pero SIN NINGUNA
#GARANTÍA; incluso sin la garantía implícita de USABILIDAD O UTILIDAD PARA UN
#FIN PARTICULAR. Vea la Licencia Pública General GNU para más detalles.
#
#Usted debería haber recibido una copia de la Licencia Pública General GNU
#junto a este programa; si no es así, escriba a la Free Software Foundation,
#Inc. 675 Mass Ave, Cambridge, MA 02139, EEUU.
#
#
##############################################################################

# generated by wxGlade 0.6.3 on Wed Aug 12 20:53:27 2009

import wx
import wx.grid
import MySQLdb

# begin wxGlade: extracode
# end wxGlade



class LegajoSocial(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: LegajoSocial.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        menuBar = wx.MenuBar()
        menuArchivo = wx.Menu()
        menuBar.Append(menuArchivo, u'&Opciones avanzadas')
        seguimiento = menuArchivo.Append(-1, u'&Seguimiento', u'Abrir un editor de texto para escribir libremente')
        self.SetMenuBar(menuBar)
        self.CreateStatusBar()
        self.SetStatusText(u'Sancabase - Legajo social')
        self.Bind(wx.EVT_MENU, self.OnAbrirArchivo, seguimiento)
        f = open('idLegajo', 'r')
        self.id = f.readline()
        f.close()
        self.db = MySQLdb.connect('localhost', 'javier', 'javier', 'escuela', charset='UTF8')
        c = self.db.cursor()
        c.execute ('''select apellidos, nombres, fecha_nac, lugar_nac, nacionalidad, calle_dom, num_dom,
                    localidad_dom, tel_dom, estudios, hasta_est, trat_medico, jefe, empleo,
                    observaciones from alumnos where id_alumno = %s''' % self.id)
        q = c.fetchone()
        c.close()
        self.nombreB = q[1] + u' ' + q[0]
        nac = q[2]
        dia = nac.day
        mes = nac.month
        anio = nac.year
        self.fechanacB = wx.DateTimeFromDMY(dia,mes-1,anio)
        self.nacionalidadB = q[3] + u' ' + q[4]
        self.domicilioB = q[5] + u' ' + q[6] + u' ' + q[7]
        self.teB = q[8]
        self.educB = q[9] + u' hasta ' + q[10] + u' año'
        self.tratMedB = q[11]
        self.obsB = q[14]
        self.panel = wx.Panel(self, -1)
        self.lblLegajo = wx.StaticText(self.panel, -1, "Legajo Social")
        self.static_line_1 = wx.StaticLine(self.panel, -1)
        self.labelNombre = wx.StaticText(self.panel, -1, "Nombre:")
        self.nombres = wx.TextCtrl(self.panel, -1, "")
        self.labelApellidos = wx.StaticText(self.panel, -1, "Fecha nac.:")
        self.fechaNac = wx.DatePickerCtrl(self.panel, -1)
        self.labelLugarNac = wx.StaticText(self.panel, -1, "Lugar Nac. :")
        self.lugarNac = wx.TextCtrl(self.panel, -1, "")
        self.labelEstadoCivil = wx.StaticText(self.panel, -1, "Estado Civil:")
        self.estadoCivil = wx.ComboBox(self.panel, -1, choices=["Soltero/a", "Casado/a",
         "En pareja (conviviendo)", "En pareja (sin convivir)", "Separado/a", "Divorciado/a",
          "Viudo/a"], style=wx.CB_DROPDOWN|wx.CB_READONLY)
        self.labelDomicilio = wx.StaticText(self.panel, -1, "Domicilio:")
        self.domicilio = wx.TextCtrl(self.panel, -1, "")
        self.labelTelefono = wx.StaticText(self.panel, -1, u"Teléfono:")
        self.telefono = wx.TextCtrl(self.panel, -1, "")
        self.checkPlan = wx.CheckBox(self.panel, -1, "Plan Social")
        self.planSocial = wx.ComboBox(self.panel, -1, choices=[u'', "Plan Trabajar",
         "Plan Jefas y jefes", "Argentina Trabaja", "Fines"], style=wx.CB_DROPDOWN)
        self.checkPlanFamiliar = wx.CheckBox(self.panel, -1, "Familiar")
        self.planFamiliar = wx.ComboBox(self.panel, -1, choices=[u'',  "Plan Trabajar",
         "Plan Jefas y jefes", "Argentina Trabaja", "Fines"], style=wx.CB_DROPDOWN)
        self.labelEmpleo = wx.StaticText(self.panel, -1, "Empleo:")
        self.empleo = wx.ComboBox(self.panel, -1, choices=["Empleado/a  (Rel. dependencia)",
         u"Empleado/a (Contrato a término)", "Empleado/a  (Informal)", u"Changarín",
          "Cuentapropista", "Empresario/a", "Comerciante", "Empleado/a casa de familia",
           "Desocupado/a", "Jubilado/a", u'No Aplica'], style=wx.CB_DROPDOWN)
        self.labelEmpresa = wx.StaticText(self.panel, -1, u"Ubicación:")
        self.empresa = wx.TextCtrl(self.panel, -1, "")
        self.labelEduacionFormal = wx.StaticText(self.panel, -1, "Educ. formal:")
        self.educacion = wx.TextCtrl(self.panel, -1, "")
        self.checkAbandono = wx.CheckBox(self.panel, -1, u"Abandonó")
        self.motivoAbandono = wx.TextCtrl(self.panel, -1, "Motivo del mismo...")
        self.checkCursando = wx.CheckBox(self.panel, -1, "Cursando:")
        self.escuelaActual = wx.TextCtrl(self.panel, -1, "Escuela y horarios")
        self.checkFP = wx.CheckBox(self.panel, -1, "Cursos FP:")
        self.cursosFP = wx.TextCtrl(self.panel, -1, "Centro y cursos")
        self.checkJefeFam = wx.CheckBox(self.panel, -1, "Jefe/a familia?")
        self.labelFamilia = wx.StaticText(self.panel, -1, "Grupo Familiar -->")
        self.checkDeporte = wx.CheckBox(self.panel, -1, "Deportes")
        self.deportesdonde = wx.TextCtrl(self.panel, -1, u"Qué deporte y en qué lugar...")
        self.labelTiempoLibre = wx.StaticText(self.panel, -1, "Tiempo libre:")
        self.hobbyes = wx.TextCtrl(self.panel, -1, "")
        self.labelPQCentro = wx.StaticText(self.panel, -1, "Este centro...")
        self.pQCentro = wx.TextCtrl(self.panel, -1, u"... lo elegí por...")
        self.lblPQCurso = wx.StaticText(self.panel, -1, "Este curso...")
        self.pQCurso = wx.TextCtrl(self.panel, -1, u"... lo elegí por...")
        self.checkJudiciales = wx.CheckBox(self.panel, -1, "Judiciales")
        self.judiciales = wx.TextCtrl(self.panel, -1, "Anotaciones...")
        self.labelTratMed = wx.StaticText(self.panel, -1, u"Trat. méd:")
        self.tratMed = wx.TextCtrl(self.panel, -1, "")
        self.labelObs = wx.StaticText(self.panel, -1, "Obs:")
        self.obs = wx.TextCtrl(self.panel, -1, "")
        self.gridFamilia = wx.grid.Grid(self.panel, -1, size=(1, 1))
        self.gridFamilia.AutoSize()
        self.gridFamilia.EndBatch()
        self.buttonAceptar = wx.Button(self.panel, wx.ID_APPLY, "")
        self.buttonCancelar = wx.Button(self.panel, wx.ID_CANCEL, "")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_CHECKBOX, self.OnPlanSocial, self.checkPlan)
        self.Bind(wx.EVT_CHECKBOX, self.OnPlanFamiliar, self.checkPlanFamiliar)
        self.Bind(wx.EVT_CHECKBOX, self.OnAbandono, self.checkAbandono)
        self.Bind(wx.EVT_CHECKBOX, self.OnCursando, self.checkCursando)
        self.Bind(wx.EVT_CHECKBOX, self.OnFP, self.checkFP)
        self.Bind(wx.EVT_CHECKBOX, self.OnDeporte, self.checkDeporte)
        self.Bind(wx.EVT_CHECKBOX, self.OnJudiciales, self.checkJudiciales)
        self.Bind(wx.EVT_BUTTON, self.OnAceptar, self.buttonAceptar)
        self.Bind(wx.EVT_BUTTON, self.OnCancelar, self.buttonCancelar)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: LegajoSocial.__set_properties
        self.SetTitle("Sancabase - Legajo Social")
        self.SetSize((800, 600))
        self.CenterOnScreen()
        self.lblLegajo.SetFont(wx.Font(18, wx.SWISS, wx.NORMAL, wx.BOLD, 0, ""))
        self.nombres.SetFocus()
        self.nombres.SetValue(self.nombreB)
        self.domicilio.SetValue(self.domicilioB)
        self.telefono.SetValue(self.teB)
        self.fechaNac.SetValue(self.fechanacB)
        self.lugarNac.SetValue(self.nacionalidadB)
        self.estadoCivil.SetSelection(-1)
        self.planSocial.Enable(False)
        self.planSocial.SetSelection(0)
        self.planFamiliar.Enable(False)
        self.planFamiliar.SetSelection(0)
        self.empleo.SetSelection(0)
        self.educacion.SetValue(self.educB)
        self.motivoAbandono.Enable(False)
        self.escuelaActual.Enable(False)
        self.cursosFP.Enable(False)
        self.deportesdonde.Enable(False)
        self.judiciales.Enable(False)
        self.tratMed.SetValue(self.tratMedB)
        self.obs.SetValue(self.obsB)
        self.gridFamilia.CreateGrid(10, 5)
        self.gridFamilia.SetRowLabelSize(0)
        self.gridFamilia.SetColLabelSize(20)
        self.gridFamilia.EnableDragRowSize(0)
        self.gridFamilia.SetColLabelValue(0, "Nombre")
        self.gridFamilia.SetColSize(0, 80)
        self.gridFamilia.SetColLabelValue(1, "Pariente")
        self.gridFamilia.SetColSize(1, 80)
        self.gridFamilia.SetColLabelValue(2, "Edad")
        self.gridFamilia.SetColSize(2, 40)
        self.gridFamilia.SetColLabelValue(3, "Trabaja")
        self.gridFamilia.SetColSize(3, 65)
        self.gridFamilia.SetColLabelValue(4, "Obs")
        self.gridFamilia.SetColSize(4, 90)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: LegajoSocial.__do_layout
        sizerGrande = wx.BoxSizer(wx.VERTICAL)
        sizerPpal = wx.BoxSizer(wx.VERTICAL)
        sizerBotones = wx.BoxSizer(wx.HORIZONTAL)
        sizerMedio = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_1 = wx.FlexGridSizer(8, 2, 2, 2)
        gridDatosPersonales = wx.FlexGridSizer(15, 2, 2, 2)
        sizerPpal.Add(self.lblLegajo, 0, 0, 0)
        sizerPpal.Add(self.static_line_1, 0, wx.TOP|wx.BOTTOM|wx.EXPAND, 4)
        gridDatosPersonales.Add(self.labelNombre, 0, wx.ALL, 1)
        gridDatosPersonales.Add(self.nombres, 0, wx.EXPAND, 0)
        gridDatosPersonales.Add(self.labelApellidos, 0, wx.ALL, 1)
        gridDatosPersonales.Add(self.fechaNac, 0, wx.ALL|wx.EXPAND, 1)
        gridDatosPersonales.Add(self.labelLugarNac, 0, wx.ALL, 1)
        gridDatosPersonales.Add(self.lugarNac, 0, wx.ALL|wx.EXPAND, 1)
        gridDatosPersonales.Add(self.labelEstadoCivil, 0, wx.ALL, 1)
        gridDatosPersonales.Add(self.estadoCivil, 0, wx.ALL|wx.EXPAND, 1)
        gridDatosPersonales.Add(self.labelDomicilio, 0, wx.ALL, 1)
        gridDatosPersonales.Add(self.domicilio, 0, wx.ALL|wx.EXPAND, 1)
        gridDatosPersonales.Add(self.labelTelefono, 0, wx.ALL, 1)
        gridDatosPersonales.Add(self.telefono, 0, wx.ALL|wx.EXPAND, 1)
        gridDatosPersonales.Add(self.checkPlan, 0, wx.ALL, 1)
        gridDatosPersonales.Add(self.planSocial, 0, wx.ALL|wx.EXPAND, 1)
        gridDatosPersonales.Add(self.checkPlanFamiliar, 0, wx.ALL, 1)
        gridDatosPersonales.Add(self.planFamiliar, 0, wx.ALL|wx.EXPAND, 1)
        gridDatosPersonales.Add(self.labelEmpleo, 0, wx.ALL, 1)
        gridDatosPersonales.Add(self.empleo, 0, wx.ALL|wx.EXPAND, 1)
        gridDatosPersonales.Add(self.labelEmpresa, 0, wx.ALL, 1)
        gridDatosPersonales.Add(self.empresa, 0, wx.ALL|wx.EXPAND, 1)
        gridDatosPersonales.Add(self.labelEduacionFormal, 0, wx.ALL, 1)
        gridDatosPersonales.Add(self.educacion, 0, wx.ALL|wx.EXPAND, 1)
        gridDatosPersonales.Add(self.checkAbandono, 0, wx.ALL, 1)
        gridDatosPersonales.Add(self.motivoAbandono, 0, wx.ALL|wx.EXPAND, 1)
        gridDatosPersonales.Add(self.checkCursando, 0, wx.ALL, 1)
        gridDatosPersonales.Add(self.escuelaActual, 0, wx.ALL|wx.EXPAND, 1)
        gridDatosPersonales.Add(self.checkFP, 0, wx.ALL, 1)
        gridDatosPersonales.Add(self.cursosFP, 0, wx.ALL|wx.EXPAND, 1)
        gridDatosPersonales.Add(self.checkJefeFam, 0, wx.ALL, 1)
        gridDatosPersonales.Add(self.labelFamilia, 0, wx.ALL|wx.ALIGN_RIGHT, 1)
        gridDatosPersonales.AddGrowableCol(1)
        sizerMedio.Add(gridDatosPersonales, 1, wx.RIGHT|wx.EXPAND, 14)
        grid_sizer_1.Add(self.checkDeporte, 0, wx.ALL, 1)
        grid_sizer_1.Add(self.deportesdonde, 0, wx.ALL|wx.EXPAND, 1)
        grid_sizer_1.Add(self.labelTiempoLibre, 0, wx.ALL, 1)
        grid_sizer_1.Add(self.hobbyes, 0, wx.ALL|wx.EXPAND, 1)
        grid_sizer_1.Add(self.labelPQCentro, 0, 0, 0)
        grid_sizer_1.Add(self.pQCentro, 0, wx.ALL|wx.EXPAND, 1)
        grid_sizer_1.Add(self.lblPQCurso, 0, wx.ALL, 1)
        grid_sizer_1.Add(self.pQCurso, 0, wx.ALL|wx.EXPAND, 1)
        grid_sizer_1.Add(self.checkJudiciales, 0, wx.ALL, 1)
        grid_sizer_1.Add(self.judiciales, 0, wx.ALL|wx.EXPAND, 1)
        grid_sizer_1.Add(self.labelTratMed, 0, wx.ALL, 1)
        grid_sizer_1.Add(self.tratMed, 0, wx.ALL|wx.EXPAND, 1)
        grid_sizer_1.Add(self.labelObs, 0, wx.ALL, 1)
        grid_sizer_1.Add(self.obs, 0, wx.ALL|wx.EXPAND, 1)
        grid_sizer_1.AddGrowableCol(1)
        sizer_4.Add(grid_sizer_1, 1, wx.EXPAND, 0)
        sizer_3.Add(sizer_4, 0, wx.LEFT|wx.EXPAND, 10)
        sizer_3.Add(self.gridFamilia, 1, wx.ALL|wx.EXPAND|wx.ALIGN_CENTER_HORIZONTAL|wx.FIXED_MINSIZE, 9)
        sizerMedio.Add(sizer_3, 1, wx.EXPAND, 0)
        sizerPpal.Add(sizerMedio, 1, wx.EXPAND, 0)
        sizerBotones.Add(self.buttonAceptar, 0, wx.LEFT|wx.RIGHT|wx.BOTTOM, 8)
        sizerBotones.Add(self.buttonCancelar, 0, wx.LEFT|wx.RIGHT|wx.BOTTOM, 8)
        sizerPpal.Add(sizerBotones, 0, wx.ALIGN_RIGHT, 0)
        self.panel.SetSizer(sizerPpal)
        sizerGrande.Add(self.panel, 1, wx.EXPAND, 0)
        self.SetSizer(sizerGrande)
        self.Layout()
        # end wxGlade

    def OnPlanSocial(self, event): # wxGlade: LegajoSocial.<event_handler>
        if self.checkPlan.IsChecked():
            self.planSocial.Enable()
            self.planSocial.SetFocus()
            self.planSocial.SetValue('')
        else:
            self.planSocial.Disable()
        
    def OnPlanFamiliar(self, event): # wxGlade: LegajoSocial.<event_handler>
        if self.checkPlanFamiliar.IsChecked():
            self.planFamiliar.Enable()
            self.planFamiliar.SetFocus()
            self.planFamiliar.SetValue('')
        else:
            self.planFamiliar.Disable()

    def OnAbandono(self, event): # wxGlade: LegajoSocial.<event_handler>
        if self.checkAbandono.IsChecked():
            self.motivoAbandono.Enable()
            self.motivoAbandono.SetFocus()
            self.motivoAbandono.SetValue('')
        else:
            self.motivoAbandono.SetValue(u'Motivo del mismo...')
            self.motivoAbandono.Disable()

    def OnCursando(self, event): # wxGlade: LegajoSocial.<event_handler>
        if self.checkCursando.IsChecked():
            self.escuelaActual.Enable()
            self.escuelaActual.SetFocus()
            self.escuelaActual.SetValue('')
        else:
            self.escuelaActual.SetValue(u'Escuela y horarios')
            self.escuelaActual.Disable()

    def OnFP(self, event): # wxGlade: LegajoSocial.<event_handler>
        if self.checkFP.IsChecked():
            self.cursosFP.Enable()
            self.cursosFP.SetFocus()
            self.cursosFP.SetValue('')
        else:
            self.cursosFP.SetValue(u'Centro y cursos')
            self.cursosFP.Disable()

    def OnDeporte(self, event):
        if self.checkDeporte.IsChecked():
            self.deportesdonde.Enable()
            self.deportesdonde.SetFocus()
            self.deportesdonde.SetValue('')
        else:
            self.deportesdonde.SetValue(u'Qué deporte y en qué lugar')
            self.deportesdonde.Disable()


    def OnJudiciales(self, event): # wxGlade: LegajoSocial.<event_handler>
        if self.checkJudiciales.IsChecked():
            self.judiciales.Enable()
            self.judiciales.SetFocus()
            self.judiciales.SetValue('')
        else:
            self.judiciales.SetValue(u'Anotaciones')
            self.judiciales.Disable()

    def OnAceptar(self, event): # wxGlade: LegajoSocial.<event_handler>
        nombre = self.nombres.GetValue()
        dia = self.fechaNac.GetValue()
        fechanac = ('%04d/%02d/%02d' % (dia.GetYear(), dia.GetMonth()+1, dia.GetDay()))
        lugarNac = self.lugarNac.GetValue()
        estcivil = self.estadoCivil.GetValue()
        domicilio = self.domicilio.GetValue()
        telefono = self.telefono.GetValue()
        if self.checkPlan.IsChecked():
            planSocial = 1
        else:
            planSocial = 0
        queplan = self.planSocial.GetValue()
        if self.checkPlanFamiliar.IsChecked():
            planFamiliar = 1
        else:
            planFamiliar = 0
        queplanfamiliar = self.planFamiliar.GetValue()    
        empleo = self.empleo.GetValue()
        ubicacionempleo = self.empresa.GetValue()
        educformal = self.educacion.GetValue()
        if self.checkAbandono.IsChecked():
            abandono = 1
        else:
            abandono = 0
        causaabandono = self.motivoAbandono.GetValue()
        if self.checkCursando.IsChecked():
            cursando = 1
        else:
            cursando = 0
        cursandolugar = self.escuelaActual.GetValue()
        if self.checkFP.IsChecked():
            otroscursosfp = 1
        else:
            otroscursosfp = 0
        otroscursosfpcuales = self.cursosFP.GetValue()
        if self.checkJefeFam.IsChecked():
            jefefamilia = 1
        else:
            jefefamilia = 0
        if self.checkDeporte.IsChecked():
            deportes = 1
        else:
            deportes = 1
        deportesdonde = self.deportesdonde.GetValue()
        tiempolibre = self.hobbyes.GetValue()
        eligioelcentro = self.pQCentro.GetValue()
        eligioelcurso = self.pQCurso.GetValue()
        if self.checkJudiciales.IsChecked():
            judiciales = 1
        else:
            judiciales = 0
        causas = self.judiciales.GetValue()
        tratmedico = self.tratMed.GetValue()
        observaciones = self.obs.GetValue()
        c = self.db.cursor()
        c.execute('''INSERT INTO legajo (id_alumno, nombre, fechanac, lugarnac, estcivil, domicilio, te, 
        plansocial, queplan, planfamiliar, queplanfamiliar, empleo, ubicacionempleo, educformal, 
        abandono, causaabandono, cursando, cursandolugar, otroscursosfp, otroscursosfpcuales, jefefamilia,
        deportes, deportesdonde, tiempolibre, eligioelcentro, eligioelcurso, judiciales, causas, tratmedico,
        observaciones) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,
        %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)''', (self.id, nombre, fechanac, lugarNac, estcivil,
        domicilio, telefono, planSocial, queplan, planFamiliar, queplanfamiliar, empleo, ubicacionempleo,
        educformal, abandono, causaabandono, cursando, cursandolugar, otroscursosfp, otroscursosfpcuales,
        jefefamilia, deportes, deportesdonde, tiempolibre, eligioelcentro, eligioelcurso, judiciales,
        causas, tratmedico, observaciones))
        # Cargo el grupo familiar
        lista = []
        for i in range(10):
            tupla =[]
            for j in range(5):
                a = self.gridFamilia.GetCellValue(i, j)
                tupla.append(a)
            t = tuple(tupla)
            lista.append(t)
        try:
            c.execute('''CREATE TABLE grupoFam_%s (id_fam INT(11) NOT NULL PRIMARY KEY AUTO_INCREMENT,
            `nombre` VARCHAR(64) NOT NULL  DEFAULT ' ',`parentesco` VARCHAR (32) NULL,
             `trabajo` VARCHAR(32) NULL,`edad` VARCHAR(2) NULL,
             `obs` TINYTEXT NULL)'''% str(self.id))
            
        finally:
            for tupla in lista:
                c.execute('''INSERT INTO `grupoFam_%s` (nombre, parentesco, edad, trabajo, 
                obs) VALUES (%s, %s, %s, %s, %s)''', (int(self.id), tupla[0], tupla[1],
                 tupla[2], tupla[3], tupla[4]))
            c.close()
            wx.MessageBox(u'Operación realizada con éxito', u'Alta de Legajo social',
             wx.OK | wx.ICON_INFORMATION, self)
            self.Close()
        
    def OnAbrirArchivo(self, event):
        import editor
        ventana = editor.RichTextFrame(self, -1, u'Editor de textos de Sancabase', size=(700, 500), style = wx.DEFAULT_FRAME_STYLE)
        ventana.CenterOnScreen()
        ventana.Show(True)
        
    def OnCancelar(self, event): # wxGlade: LegajoSocial.<event_handler>
        self.Close()

# end of class LegajoSocial


if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame = LegajoSocial(None, -1, "")
    app.SetTopWindow(frame)
    frame.Show()
    app.MainLoop()
